---
title: "Simulations 2. Leveraging Prior Knowledge for Improved Retention Prediction in Reversed-Phase HPLC"
author:
  - name: "Paweł Wiczling*"
    affiliations:
      - name: "Department of Biopharmaceutics and Pharmacodynamics, Medical University of Gdańsk, Gen. J. Hallera 107, 80-416 Gdańsk, Poland"
date: "`r format(Sys.Date())`"
format:
  html:
    theme: cosmo
    toc: true
    code-fold: true  
    code-tools: true
    fig-width: 7
    fig-height: 7
---

```{r setuphtml, include=FALSE}
knitr::opts_chunk$set(cache=TRUE, message=FALSE, error=FALSE, warning=FALSE, comment=NA, out.width='95%')
#usethis::create_github_token()
```

# Setup
```{r setup}
library(cmdstanr)
library(pracma)
library(numDeriv)
library(dplyr)
library(ggplot2)
library(mvtnorm)
library(tidyr)
library(purrr)
library(mrgmisc)
library(patchwork)
library(stringr)
library(reshape2)
library(here)
library(tibble)
library(flextable)
select = dplyr::select
# remotes::install_github("metrumresearchgroup/mrgmisc")
# for parallel calculation use linux (mclaplly), i.e. Ubuntu 24.04 on Windows WSL
#' Helper functions
source("helper_functions.R")
```

```{r paths}
#' folder shortcuts:
figures_dir1 <- here("deliv", "figures", "manuscript")
tables_dir1  <- here("deliv", "tables", "manuscript")

if (!file.exists(figures_dir1)) dir.create(figures_dir1, recursive = T)
if (!file.exists(tables_dir1)) dir.create(tables_dir1, recursive = T)

thisScript <- "optimal-design-for-mixtures-compare-tg-v2"
```

```{r helper-save-functions}
my.ggsave <- function(.plot, .filename, .path=figures_dir, .height= 7, .width= 6) {
ggsave(plot=.plot, filename=.filename, path=.path, height=.height, width=.width)
}
my.ggsave.png <- function(.plot, .filename, .path=figures_dir, .height=7, .width= 6) {
ggsave(plot=.plot, filename=.filename, path=.path, height=.height, width=.width)
}
```

# Introduction

# Priors
Priors are based on the following article "Comparison of Chromatographic Stationary Phases Using a Bayesian-Based Multilevel Model" by Paweł Wiczling and Agnieszka Kamedulska published in Analytical Chemistry 2024 96 (3), 1310-1319. In this work a simplified approach is taken with the focus on the neutral, acidic and basic forms of analytes and a single chromatographic stationary phase (Xbridge), assuming the pKa and changes of pKa with organic modifier are known.

```{r literature-priors}
# fun_generate_priors defined in helper_functions.R
priorsN_MeOH=fun_generate_priors("N_MeOH", logP=2.2)
priorsN_ACN=fun_generate_priors("N_ACN", logP=2.2)
priorsN=fun_generate_priors("N", logP=2.2)
priorsA=fun_generate_priors("A", logP=2.2)
priorsB=fun_generate_priors("B", logP=2.2)
priorsNB=fun_generate_priors("NB", logP=2.2)
priorsNA=fun_generate_priors("NA", logP=2.2)
```

# Stan multiple analytes. Single form analytes. fi and tg for MeOH and ACN as design variables

# Compile stan models
```{r single-form-analytes-compilation}
mod_analytes_gq= cmdstan_model("../stan/hplc-gra-single-form-analytes-gq.stan", stanc_options = list("O1"))
mod_analytes_sim = cmdstan_model("../stan/hplc-gra-single-form-analytes-sim-v2.stan", stanc_options = list("O1"))
mod_analytes = cmdstan_model("../stan/hplc-gra-single-form-analytes.stan", stanc_options = list("O1"))
mod_analytes$compile(compile_model_methods=TRUE,force_recompile=TRUE)
```


```{r fun-helpers}
# to avoid recalculations
mean_log_det_stan = function(data, init, chosen_indices, S){
  
init_ma = function(){list(param=init)}
  
data$selected = chosen_indices;
data$nSel = length(chosen_indices);

 fit_opt  = mod_analytes$optimize(
   data = data,
   output_dir = here::here("stanfiles"),
   output_basename = S,
   seed = cseed,
   init = init_ma,
   jacobian = TRUE,
   show_messages = F)
 
 mode=fit_opt$unconstrain_variables(list(param = fit_opt$mle("param")))
 hessian = fit_opt$hessian(unconstrained_variables = mode)$hessian

logdet = unlist(purrr::map(1:data$nAnalytes,\(i) log(det(-hessian[((i-1)*3+1):((i-1)*3+3),((i-1)*3+1):((i-1)*3+3)]))))

return(logdet)
}
```

# Simulation

The simulation involved n = 500 analytes with log P and analyte type (acid and base) drawn at random from the following distributions:  $logP_i \sim normal(2,2.2)$ and $Analyte_i \sim categorical(A=0.5,B=0.5)$. Log P values were truncated within 0.5 and 7. For signle pH scenarios the analyte form distribution was 40% for neutral, 30% for acidic, and 30% for basic form. 
  
```{r single-form-analytes-simfun}

max_var_gra_tg <- function(fr_tg=1){
  
hplcparam_candidates_df = expand_grid(tg=seq(10,270,by=10), 
                                          td=2.1, 
                                          to=0.532,
                                          te=0.04, 
                                          fio = seq(0.05, 0.2, by=0.05),
                                          fif = 0.8,
                                          m=c(0,1),
                                          xpH=c(0,1))

#--------------------------------------------------------------------------------------------------
data_ma_full <-hplcparam_candidates_df%>%filter(xpH==0)
nObs_sim = nrow(data_ma_full)
steps_sim = 4 + 6*data_ma_full$m
hplcparam_sim=as.matrix(data_ma_full%>%dplyr::select(c(tg,td,to,te,fio,fif,m)))
#--------------------------------------------------------------------------------------------------

data_ma=hplcparam_candidates_df%>%
mutate(tg=tg*fr_tg)%>%
filter(xpH==0)

nObs = nrow(data_ma);
nAnalytes =50;
cseed = 1234;
n_param = 3;
n_rep = 10;

datastruct_noprior_ma=list()
datastruct_prior_ma=list()
inits = list()

for (i in 1:n_rep) {
datastruct_prior_ma[[i]] = list(nObs=nObs,
                   nAnalytes=nAnalytes,
                   steps = 4 + 6*data_ma$m,
                   hplcparam=as.matrix(data_ma%>%dplyr::select(c(tg,td,to,te,fio,fif,m))),
                   include_prior = 1,
                   run_estimation=1,
                   nSel = nObs,
                   selected = 1:nObs,
                   nObs_sim=nObs_sim,
                   steps_sim = steps_sim,
                   hplcparam_sim=hplcparam_sim)

fit_gq  = mod_analytes_gq$sample(data = datastruct_prior_ma[[i]],
                                         seed = cseed,
                                         fixed_param = TRUE,
                                         chains = 1,
                                         iter_sampling=1)

datastruct_prior_ma[[i]]$trobs = matrix(fit_gq$draws(format = "matrix", variable = "y_hat_sim"),nAnalytes,nObs)
datastruct_prior_ma[[i]]$logPobs = fit_gq$draws(format = "matrix", variable = "logPobs")[1:nAnalytes]
datastruct_prior_ma[[i]]$N1A2B3 = fit_gq$draws(format = "matrix", variable = "N1A2B3")[1:nAnalytes]
param = matrix(fit_gq$draws(format = "matrix", variable = "paramsim"),nAnalytes,3)


datastruct_noprior_ma[[i]]=datastruct_prior_ma[[i]];
datastruct_noprior_ma[[i]]$include_prior = 0.01;

inits[[i]]=param

cseed = cseed+1
}

logP = unlist(purrr::map(1:length(datastruct_noprior_ma),\(i) datastruct_noprior_ma[[i]]$logPobs))
NAB = unlist(purrr::map(1:length(datastruct_noprior_ma),\(i) datastruct_noprior_ma[[i]]$N1A2B3))

#--------------------------------------------------------------------------------------------------
chosen_indices_prior = c(65,66,209,210) # ref
chosen_indices_noprior= c(65,66,209,210) # ref
maxt_prior_ref = sum(data_ma$tg[chosen_indices_prior])
maxt_noprior_ref = sum(data_ma$tg[chosen_indices_noprior])
prior_ma_ref = fun_predict_stan_results(mod_analytes_sim, datastruct_prior_ma, inits, chosen_indices_prior, 10) 
noprior_ma_ref = fun_predict_stan_results(mod_analytes_sim, datastruct_noprior_ma, inits, chosen_indices_noprior, 10) 

chosen_indices_prior   = c(209,212) # p=2
maxt_prior_2 = sum(data_ma$tg[chosen_indices_prior])
prior_ma_2 = fun_predict_stan_results(mod_analytes_sim, datastruct_prior_ma, inits, chosen_indices_prior, 10) 

chosen_indices_prior   = c(210,209,79) # p=3
chosen_indices_noprior = c(210,209,79) # p=3
maxt_prior_3 = sum(data_ma$tg[chosen_indices_prior])
maxt_noprior_3 = sum(data_ma$tg[chosen_indices_noprior])
prior_ma_3 = fun_predict_stan_results(mod_analytes_sim, datastruct_prior_ma, inits, chosen_indices_prior, 10) 
noprior_ma_3 = fun_predict_stan_results(mod_analytes_sim, datastruct_noprior_ma, inits, chosen_indices_noprior, 10) 

chosen_indices_prior   = c(209,210,215,79) # p=4
chosen_indices_noprior = c(209,210,215,71) # p=4
maxt_prior_4 = sum(data_ma$tg[chosen_indices_prior])
maxt_noprior_4 = sum(data_ma$tg[chosen_indices_noprior])
prior_ma_4 = fun_predict_stan_results(mod_analytes_sim, datastruct_prior_ma, inits, chosen_indices_prior, 10) 
noprior_ma_4 = fun_predict_stan_results(mod_analytes_sim, datastruct_noprior_ma, inits, chosen_indices_noprior, 10)

chosen_indices_prior = c(210,209,212,215,79) # p=5
chosen_indices_noprior = c(210,209,212,215,71) # p=5
maxt_prior_5 = sum(data_ma$tg[chosen_indices_prior])
maxt_noprior_5 = sum(data_ma$tg[chosen_indices_noprior])
prior_ma_5 = fun_predict_stan_results(mod_analytes_sim, datastruct_prior_ma, inits, chosen_indices_prior, 10) 
noprior_ma_5 = fun_predict_stan_results(mod_analytes_sim, datastruct_noprior_ma, inits, chosen_indices_noprior, 10) 

iresults = rbind(prior_ma_ref$iresults%>%
                   mutate(method ="prior_ref", maxt = maxt_prior_ref),
                 noprior_ma_ref$iresults%>%
                   mutate(method ="noprior_ref", maxt = maxt_noprior_ref),
                prior_ma_2$iresults%>%
                   mutate(method ="prior_2", maxt = maxt_prior_2),
                 prior_ma_3$iresults%>%
                   mutate(method ="prior_3", maxt = maxt_prior_3),
                 noprior_ma_3$iresults%>%
                   mutate(method ="noprior_3", maxt = maxt_noprior_3),
                 prior_ma_4$iresults%>%
                   mutate(method ="prior_4", maxt = maxt_prior_4),
                 noprior_ma_4$iresults%>%
                   mutate(method ="noprior_4", maxt = maxt_noprior_4),
                 prior_ma_5$iresults%>%
                   mutate(method ="prior_5", maxt = maxt_prior_5),
                 noprior_ma_5$iresults%>%
                   mutate(method ="noprior_5", maxt = maxt_noprior_5))%>%
  mutate(ivar = if_else(ivar>1e6,1e6,ivar)) %>%
  left_join(tibble(i=as.factor(seq(1,nAnalytes*n_rep,1)),logP=logP, Type=NAB))%>%
  mutate(fr_tg=fr_tg)

return(iresults)
}
```

```{r single-form-analytes-gra-sim, eval=FALSE}
fr_tg=seq(0.1,2,by=0.05)
sim <- purrr::map(fr_tg, \(x) max_var_gra_tg(x))
sim<-list_rbind(sim)
```

```{r single-form-analytes-gra-sim-load}
#saveRDS(sim,file = "../data/results-sim.RData")
sim=readRDS(file = "../data/results-sim.RData")
```

# Max var
```{r plot-results-maxvar}
sim_summary <- sim %>%
  group_by(method,fr_tg, maxt)%>%
  summarise(mivar = median(ivar),
            livar = quantile(ivar,0.05),
            uivar = quantile(ivar,0.95)) %>%
  ungroup %>%
  mutate(maxtr = maxt*fr_tg)%>%
  mutate(type = if_else(str_detect(method, 'noprior'), "No prior", "Prior"))%>%
  mutate(ltype = if_else(str_detect(method, 'ref'), "reference", "optimized")) %>%
   mutate(method = str_replace(method, 'noprior_|prior_', ''))

p1=sim_summary %>%
  ggplot(aes(x=maxtr/60,y=mivar, color=method, linetype = ltype))+
  #geom_ribbon(aes(ymin = livar, ymax = uivar, fill = method),  alpha=0.1, colour = NA) +
  geom_line()+  
  geom_point(data = sim_summary %>% filter(fr_tg==1),aes(x=maxt/60,y=mivar, color=method))+  
  facet_wrap(.~type)+
  labs(x="Duration of experiments, h", y="Maximal standardized variance", linetype="design", color = "n")

p11=p1+coord_cartesian(xlim=c(0,20),ylim=c(1,5))

fig1 <- (p1+coord_cartesian(xlim=c(0,20),ylim=c(1,100)))/(p11)+
  plot_layout(guides="collect", axis="collect")

fig1

my.ggsave(.plot=fig1, .filename=paste("single-form-analytes-maxvar-comapretg.pdf"), .path = figures_dir1)
my.ggsave.png(.plot=fig1, .filename=paste("single-form-analytes-maxvar-comapretg.png"), .path = figures_dir1)
```

```{r plot-results-maxvar-v2}
sim_summary <- sim %>%
  group_by(method,fr_tg, maxt)%>%
  summarise(mivar = median(ivar),
            livar = quantile(ivar,0.05),
            uivar = quantile(ivar,0.95)) %>%
  ungroup %>%
  mutate(maxtr = maxt*fr_tg)%>%
  mutate(type = if_else(str_detect(method, 'noprior'), "No prior", "Prior"))%>%
  mutate(ltype = if_else(str_detect(method, 'ref'), "reference", "optimized")) %>%
   mutate(method = str_replace(method, 'noprior_|prior_', ''))

p1=sim_summary %>%
  ggplot(aes(x=maxtr/60,y=mivar, color=type, linetype = ltype))+
  #geom_ribbon(aes(ymin = livar, ymax = uivar, fill = method),  alpha=0.1, colour = NA) +
  geom_line()+  
  geom_point(data = sim_summary %>% filter(fr_tg==1),aes(x=maxt/60,y=mivar, color=type))+  
  facet_wrap(.~method)+
  labs(x="Duration of experiments, h", y="Maximal standardized variance", linetype="design", color = "n")


fig2 <- (p1+coord_cartesian(xlim=c(0,20),ylim=c(1,5)))+
  plot_layout(guides="collect", axis="collect")

fig2

my.ggsave(.plot=fig2, .filename=paste("single-form-analytes-maxvar-comapretg-v2.pdf"), .path = figures_dir1)
my.ggsave.png(.plot=fig2, .filename=paste("single-form-analytes-maxvar-comapretg-v2.png"), .path = figures_dir1)
```
# Mean var
```{r plot-results-mean}
sim_summary <- sim %>%
  group_by(method,fr_tg, maxt)%>%
  summarise(mivar = median(imvar),
            livar = quantile(imvar,0.05),
            uivar = quantile(imvar,0.95)) %>%
  ungroup %>%
  mutate(maxtr = maxt*fr_tg)%>%
  mutate(type = if_else(str_detect(method, 'noprior'), "No prior", "Prior"))%>%
  mutate(ltype = if_else(str_detect(method, 'ref'), "reference", "optimized")) %>%
   mutate(method = str_replace(method, 'noprior_|prior_', ''))

p1=sim_summary %>%
  ggplot(aes(x=maxtr/60,y=mivar, color=method, linetype = ltype))+
  #geom_ribbon(aes(ymin = livar, ymax = uivar, fill = method),  alpha=0.1, colour = NA) +
  geom_line()+  
  geom_point(data = sim_summary %>% filter(fr_tg==1),aes(x=maxt/60,y=mivar, color=method))+  
  facet_wrap(.~type)+
  labs(x="Duration of experiments, h", y="Mean standardized variance", linetype="design", color = "n")

p12 = p1+coord_cartesian(xlim=c(0,20),ylim=c(0,2))

fig1 <- (p1+coord_cartesian(xlim=c(0,20),ylim=c(0,25)))/(p12)+
  plot_layout(guides="collect", axis="collect")

fig1

my.ggsave(.plot=fig1, .filename=paste("single-form-analytes-meanvar-comapretg.pdf"), .path = figures_dir1)
my.ggsave.png(.plot=fig1, .filename=paste("single-form-analytes-meanvar-comapretg.png"), .path = figures_dir1)
```

```{r plot-results-mean-v2}
sim_summary <- sim %>%
  group_by(method,fr_tg, maxt)%>%
  summarise(mivar = median(imvar),
            livar = quantile(imvar,0.05),
            uivar = quantile(imvar,0.95)) %>%
  ungroup %>%
  mutate(maxtr = maxt*fr_tg)%>%
  mutate(type = if_else(str_detect(method, 'noprior'), "No prior", "Prior"))%>%
  mutate(ltype = if_else(str_detect(method, 'ref'), "reference", "optimized")) %>%
   mutate(method = str_replace(method, 'noprior_|prior_', ''))

p1=sim_summary %>%
  ggplot(aes(x=maxtr/60,y=mivar, color=type, linetype = ltype))+
  #geom_ribbon(aes(ymin = livar, ymax = uivar, fill = method),  alpha=0.1, colour = NA) +
  geom_line()+  
  geom_point(data = sim_summary %>% filter(fr_tg==1),aes(x=maxt/60,y=mivar, color=type))+  
  facet_wrap(.~method)+
  labs(x="Duration of experiments, h", y="Mean standardized variance", linetype="design", color = "n")


fig2 <- (p1+coord_cartesian(xlim=c(0,20),ylim=c(0,5)))+
  plot_layout(guides="collect", axis="collect")

fig2

my.ggsave(.plot=fig2, .filename=paste("single-form-analytes-meanvar-comapretg-v2.pdf"), .path = figures_dir1)
my.ggsave.png(.plot=fig2, .filename=paste("single-form-analytes-meanvar-comapretg-v2.png"), .path = figures_dir1)
```

# Combined
```{r combined-plots}
fig3 <- (p11)/(p12)+ plot_layout(guides="collect", axis="collect")
fig3

my.ggsave(.plot=fig3, .filename=paste("single-form-analytes-maxmeanvar-comapretg.pdf"), .path = figures_dir1)
my.ggsave.png(.plot=fig3, .filename=paste("single-form-analytes-maxmeanvar-comapretg.png"), .path = figures_dir1)
```

# References {.unnumbered}

::: {#refs}
:::

# Licenses {.unnumbered}

-   Code & copy; 2024, Paweł Wiczling, licensed under BSD-3.
-   Text & copy; 2024, Paweł Wiczling, licensed under CC-BY-NC 4.0.

# Original Computing Environment {.unnumbered}

```{r sessionInfo}
sessionInfo()
```
